create table renter
(
	renterID            int generated always as identity not null primary key,
	renter_category     text not null check (renter_category='legal' or renter_category='private'),
	benefit             decimal(3,2) check(benefit>=0.00 and benefit<=100.00)
);

create table legal_person
(
    renterID            int primary key,
    foreign key (renterID)
        references renter,
    name                text,
    address             text,
    telephone_number    integer,
    license_number      integer,
    bank_details        integer,
    "company category"  char
);

drop table legal_person;

--Если добавляется арендатор - юридическое лицо,
--проверка, что в таблице частных лиц ID этого арендатора нет
create or replace function check_legal() returns trigger as $check_legal_renter$
    declare
        private_renterID int;
    begin
        select distinct renterID from private_person
        where private_person.renterID=new.renterID
        into private_renterID;

        if (private_renterID is not null) then
            raise exception '% is illegal renter ID', new.renterID;
        end if;
        return new;
    end
$check_legal_renter$ language plpgsql;

drop trigger check_legal_renter on legal_person;

create trigger check_legal_renter
    before insert on legal_person
    for each row EXECUTE PROCEDURE check_legal();


create table private_person
(
    renterID            int primary key,
    foreign key (renterID)
        references renter,
    name                text,
    address             text,
    birth_date          date,
    passport_data       int,
    telephone_number    integer
);
drop table private_person;

--Если добавляется арендатор - частное лицо,
--проверка, что в таблице  юр. лиц ID этого арендатора нет
create or replace function check_private() returns trigger as $check_private_renter$
    declare
        legal_renterID int;
    begin
        select distinct renterID from legal_person
        where legal_person.renterID=new.renterID
        into legal_renterID;

        if (legal_renterID is not null) then
            raise exception '% is illegal renter ID', new.renterID;
        end if;
        return new;
    end
$check_private_renter$ language plpgsql;

--drop trigger check_private_renter on private_person;

create trigger check_private_renter
    before insert on private_person
    for each row EXECUTE PROCEDURE check_private();


create table price_list
(
    price_listID int primary key,
    date date default current_date
);

create table price_list_category
(
    price_list_categoryID int primary key,
    renterID int,
    foreign key (renterID)
        references renter,
    price_listID int,
    foreign key (price_listID)
        references price_list
);

create table rental_doc
(
    rental_docID int generated always as identity primary key,
    renterID int,
    foreign key (renterID)
        references renter,
    price_listID int,
    foreign key (price_listID)
        references price_list,
    create_date date not null default current_date,
    pay_date date,
    release_date date,
    return_date date,
    rental_period int check (rental_period>=1)
);

create table pay_doc
(
    pay_docID int generated always as identity primary key,
    renterID int,
    foreign key (renterID)
        references renter,
    type char check (type='incoming bank order' or type='cash receipt order'),
    date date default current_date
);
drop table pay_doc;
create table rent_payment
(
    rental_docID int,
    foreign key (rental_docID)
        references rental_doc,
    pay_docID int,
    foreign key (pay_docID)
        references pay_doc,
    primary key (rental_docID, pay_docID),
    amount decimal check (amount>=0.00)
);
drop table rent_payment;
create table item
(
    item_number int primary key,
    name text,
    certificate_number int check (certificate_number>=0),
    packaging char,
    manufacturer_name text,
    cost decimal(6,2) check(cost>=0.00),
    quantity int check ( quantity>=0 )
);

create table item_list_line
(
    price_listID int,
    foreign key (price_listID)
        references price_list,
    item_number int,
    foreign key (item_number)
        references item,
    primary key (price_listID , item_number)
);
drop table item;
create table rented_items
(
    rental_docID int,
    foreign key (rental_docID)
        references rental_doc,
    price_listID int,
    item_number int,
    foreign key (price_listID, item_number)
        references item_list_line,
    primary key (rental_docID, price_listID, item_number),
    quantity int check (quantity>=0)
);

create or replace function check_item() returns trigger as $checkitem$
    declare
        priceID int;
        itemquantity int;
    begin
        select distinct price_listID from rental_doc
        where rental_doc.rental_docID=new.rental_docID
        into priceID;

        --Проверка, что при включении товара в документ об аренде,
        --он указан в соответсвующем прайс-листе
        if (priceID != new.price_listID) then
            raise exception '% is illegal price-list ID', new.price_listID;
        end if;

        select distinct quantity from item
        where item.item_number=new.item_number
        into itemquantity;

        --Уменьшение товара на складе
        if (itemquantity < new.quantity) then
            raise exception 'shortage of items in stock';
        end if;
        update item
            set quantity=quantity-new.quantity
            where item.item_number = new.item_number;

        return new;
    end
$checkitem$ language plpgsql;

--drop trigger checkitem on rented_items;

create trigger checkitem
    after insert on rented_items
    for each row EXECUTE PROCEDURE check_item();

--Процедура возврата товара
create or replace procedure return_item(docID int, itemID int)
language plpgsql
as $$
    declare
        retdate date;
        reldate date;
        period int;
        renter int;
        quan int;
        pay int;
    begin
        select distinct release_date from rental_doc
        where rental_docID=docID
        into reldate;

        select distinct rental_period from rental_doc
        where rental_docID=docID
        into period;

        select distinct renterID from rental_doc
        where rental_docID=docID
        into renter;

        select distinct return_date from rental_doc
        where rental_docID=docID
        into retdate;

        if (retdate > (reldate + period * interval '1 day')) then
            insert into pay_doc(pay_docID, renterID) values (default, renter);
            select max(pay_docID) from pay_doc
            where rental_docID=docID
            into pay;
            insert into rent_payment(rental_docID, pay_docID) values (docID, pay);
        end if;


        select distinct quantity from rented_items
        where item_number=itemID and rental_docID=docID
        into quan;

        update item set quantity=quantity+quan
        where item_number=itemID;

        return;
    end
    $$;

--таблица - входной параметр: список документов об аренде
--create type doc as (rental_docID integer);

create table rdocs
(
    rentaldocID integer
);
drop table rdocs;

--Процедура оплаты аренды
create or replace procedure pay_for_rent_main(rdocs text, pdocID integer, cost integer, inout resultout character varying)
language plpgsql
as $$
    declare
        db_cursor refcursor;
        rdocID record;
        sub decimal;
        allcost decimal;
        amount decimal;
        rID int;
        checkpdoc integer;
        _return varchar;
    begin
        resultout = '';
        open db_cursor for select rentaldocID from rdocs;
            loop
                fetch next from db_cursor into rdocID;
                exit when rdocID is null;

                    select coalesce(sum(r.amount),0) from rent_payment as r
                    where rental_docID=rdocID.rentaldocID
                    into sub;

                    select renterID from rental_doc
                    where rental_docID=rdocID.rentaldocID
                    into rID;

                    select r.pay_docID from pay_doc as p
                    join rent_payment as r on p.pay_docID=r.pay_docID
                    where renterID=rID and rental_docID=rdocID.rentaldocID
                    into checkpdoc;

                    if (pdocID is null) or (checkpdoc is null) then
                        allcost = pay_for_rent(rdocID.rentaldocID);

                        if cost+sub>allcost then
                            amount=allcost;
                            insert into rent_payment values (rdocID.rentaldocID, pdocID, amount);
                            insert into pay_doc(pay_docID, renterID, date) values (default, rID, current_date);
                            _return = 'Оплата аренды '|| rdocID.rentaldocID ||' договора произведена. ';
                        end if;

                        if cost+sub=allcost then
                            amount=allcost;
                            insert into rent_payment values (rdocID.rentaldocID, pdocID, amount);
                            insert into pay_doc(pay_docID, renterID, date) values (default, rID, current_date);
                            _return = 'Оплата аренды '|| rdocID.rentaldocID ||' договора произведена. ';
                        end if;

                        if cost+sub<allcost then
                            amount=cost+sub;
                            insert into rent_payment values (rdocID.rentaldocID, pdocID, amount);
                            insert into pay_doc(pay_docID, renterID, date) values (default, rID, current_date);
                            if amount=0 then
                                _return = 'Невозможно произвести оплату ' || rdocID.rentaldocID ||' договора';
                            end if;
                            _return = 'Для полной оплаты договора '|| rdocID.rentaldocID|| ' необходимо внести еще ' || allcost-sub-cost;
                        end if;

                        cost = cost - amount;
                    end if;

                    if (pdocID is not null) and (checkpdoc is not null) then
                        allcost = pay_for_rent(rdocID.rentaldocID) - sub;

                        if cost+sub>allcost then
                            update rent_payment set amount=allcost+sub where pay_docID=pdocID;
                            _return = 'Оплата аренды '|| rdocID.rentaldocID ||' договора произведена. ';
                        end if;

                        if cost+sub=allcost then
                            update rent_payment set amount=allcost where pay_docID=pdocID;
                            _return = 'Оплата аренды '|| rdocID.rentaldocID ||' договора произведена. ';
                        end if;

                        if cost+sub<allcost then
                            update rent_payment set amount=cost+sub where pay_docID=pdocID;
                            _return = 'Для полной оплаты договора '|| rdocID.rentaldocID|| ' необходимо внести еще ' || allcost-sub-cost;
                        end if;

                        cost = cost - allcost;
                    end if;

                resultout = resultout || E'\n' || _return;
            end loop;

        if cost+allcost>0 then
            resultout = resultout ||  E'\n' || 'Сдача: ' || cost;
        end if;
    end
$$;

create or replace function pay_for_rent(rdocID integer) returns decimal
language plpgsql
as $$
    declare
        pcost decimal;
        pquantity integer;
        i record;
        sum decimal;
    begin
        sum = 0;
        for i in
            select item_number from rented_items
            where rental_docID=rdocID
        loop
                select quantity from rented_items
                where item_number=i.item_number and rental_docID=rdocID
                into pquantity;

                select distinct cost from item
                where item_number=i.item_number
                into pcost;

                sum = sum + pquantity * pcost;
        end loop;

        return sum;
    end
    $$;

--процедура 2
delete from rental_doc;
delete from pay_doc;
delete from rented_items;


insert into rental_doc(rental_docid, renterID, price_listID) values (default, 1, 1);
insert into rental_doc(rental_docid, renterID, price_listID) values (default, 1, 1);
insert into item(item_number, name,  cost, quantity) values (1, 'пылесос', 3000, 6);
insert into item(item_number, name,  cost, quantity) values (2, 'духовка', 4000, 10);
insert into item_list_line(price_listID, item_number) values (1, 1);
insert into item_list_line(price_listID, item_number) values (1, 2);
insert into rented_items(rental_docID, price_listID, item_number, quantity) values (16, 1, 1, 2);
insert into rented_items(rental_docID, price_listID, item_number, quantity) values (16, 1, 2, 1);
insert into rented_items(rental_docID, price_listID, item_number, quantity) values (17, 1, 2, 3);
insert into pay_doc(pay_docID, renterID) values (default, 1);
insert into rent_payment(rental_docID, pay_docID, amount) values (16, 22, 2000);

insert into rdocs values (16);
insert into rdocs values (17);
delete from rent_payment;
delete from pay_doc;

do $$
declare
result_ varchar(255);
begin
call pay_for_rent_main('rdocs', 22, 18000, result_);
raise notice '%', result_;
end
$$;

select * from pay_doc;
select * from rent_payment;
select * from rented_items;

insert into renter(renterID, renter_category) values (default, 'private');
insert into renter(renterid, renter_category) values (default, 'legal');
insert into private_person(renterID, telephone_number) values (1, 4956);
insert into legal_person(renterID, telephone_number) values (2, 495);
insert into private_person(renterID, telephone_number) values (2, 111);
insert into legal_person(renterID, telephone_number) values (1, 112);
delete from renter;
delete from legal_person;
select * from legal_person;
select * from private_person;
select * from renter;

insert into price_list(price_listID) values (1);
insert into price_list(price_listID) values (2);
insert into rental_doc(rental_docid, renterID, price_listID) values (default, 1, 1);
insert into rental_doc(rental_docid, renterID, price_listID) values (default, 1, 2);
insert into rental_doc(rental_docid, renterID, price_listID) values (default, 1, 2);
insert into item(item_number, name,  quantity) values (1, 'пылесос', 6);
insert into item(item_number, name,  quantity) values (2, 'духовка', 10);
insert into item_list_line(price_listID, item_number) values (1, 1);
insert into item_list_line(price_listID, item_number) values (2, 2);
insert into rented_items(rental_docID, price_listID, item_number, quantity) values (2, 2, 2, 3);
insert into rented_items(rental_docID, price_listID, item_number, quantity) values (3, 2, 2, 8);
insert into rented_items(rental_docID, price_listID, item_number, quantity) values (1, 2, 2, 3);
--delete from rented_items;
--delete from item_list_line;
--delete from item;
select * from item;
select * from item_list_line;
select * from rented_items;

insert into renter(renterID, renter_category) values (default, 'private');
insert into rental_doc(rental_docid, renterID, price_listID, release_date, rental_period) values (default, 4, 1, '16 Apr 2021', 3);
insert into rented_items(rental_docID, price_listID, item_number, quantity) values (14, 1, 1, 1);
update rental_doc set return_date='18 Apr 2021' where rental_docID=14;
call return_item(14,1);

insert into renter(renterID, renter_category) values (default, 'private');
insert into rental_doc(rental_docid, renterID, price_listID, release_date, rental_period) values (default, 5, 2, '16 Apr 2021', 3);
insert into rented_items(rental_docID, price_listID, item_number, quantity) values (15, 2, 2, 1);
update rental_doc set return_date='20 Apr 2021' where rental_docID=15;
call return_item(15,2);

select * from renter;
select * from rental_doc;
select * from pay_doc;
select * from rent_payment;
select * from rented_items;
select * from item;

update item set quantity=10
        where item_number=2;

delete from rental_doc;
delete from price_list;
delete from rent_payment;
delete from item_list_line;
delete from renter;
do $$
    declare
        x varchar(255);
    begin
        x =  'абвгд ежз' || E'\n' || 'fsdhj';
        raise notice '%', x;
    end;
$$;

--/*
insert into renter(renterid, renter_category, benefit) values (default, 'private', 0.00);
insert into renter(renterid, renter_category, benefit) values (default, 'legal', 0.00);
insert into renter(renterid, renter_category, benefit) values (default, 'private', 0.00);
insert into renter(renterid, renter_category, benefit) values (default, 'legal', 0.00);
insert into renter(renterid, renter_category, benefit) values (default, 'legal', 0.00);
truncate renter cascade;
delete from renter;


insert into private_person(renterID, name, address, telephone_number) values (12, 'Moskovchuk Anastasia Petrovna', 'Arkhangelsk', 8911058);
insert into private_person(renterID, name, address, telephone_number) values (13, 'Khisamutdinov Marat Aidarovich', 'Belebey', 8909350);

insert into legal_person(renterID, name, address, telephone_number) values (14, 'OOO "Renderenat"', 'Izhevck', 8982833);
insert into legal_person(renterID, name, address, telephone_number) values (15, 'OOO "Dyatel"', 'Klin', 8963624);
insert into legal_person(renterID, name, address, telephone_number) values (16, 'OOO "Pop"', 'N.Novgorod', 8910791);


insert into price_list(price_listID) values (1);
insert into price_list(price_listID) values (2);
insert into price_list(price_listID) values (3);
insert into price_list(price_listID) values (4);
insert into price_list(price_listID) values (5);
insert into price_list(price_listID) values (6);
insert into price_list(price_listID) values (7);


insert into price_list_category(price_list_categoryID, renterID, price_listID) values (1, 12, 1);
insert into price_list_category(price_list_categoryID, renterID, price_listID) values (2, 12, 2);
insert into price_list_category(price_list_categoryID, renterID, price_listID) values (3, 13, 3);
insert into price_list_category(price_list_categoryID, renterID, price_listID) values (4, 14, 4);
insert into price_list_category(price_list_categoryID, renterID, price_listID) values (5, 15, 5);
insert into price_list_category(price_list_categoryID, renterID, price_listID) values (6, 15, 6);
insert into price_list_category(price_list_categoryID, renterID, price_listID) values (7, 13, 7);
insert into price_list_category(price_list_categoryID, renterID, price_listID) values (8, 16, 7);


insert into rental_doc(rental_docID, renterID, price_listID, create_date, pay_date, release_date, return_date, rental_period) --18
    values (default, 12, 1, '1 Apr 2021', '1 Apr 2021', '1 Apr 2021', '10 Apr 2021', 10);
insert into rental_doc(rental_docID, renterID, price_listID, create_date, pay_date, release_date, return_date, rental_period)
    values (default, 12, 2, '11 Apr 2021', '11 Apr 2021', '11 Apr 2021', '24 Apr 2021', 10);
insert into rental_doc(rental_docID, renterID, price_listID, create_date, pay_date, release_date, return_date, rental_period)
    values (default, 12, 2, '1 May 2021', '1 May 2021', '3 May 2021', '8 May 2021', 5);
insert into rental_doc(rental_docID, renterID, price_listID, create_date, pay_date, release_date, return_date, rental_period)
    values (default, 13, 3, '1 Apr 2021', '1 Apr 2021', '1 Apr 2021', '10 Apr 2021', 10);
insert into rental_doc(rental_docID, renterID, price_listID, create_date, pay_date, release_date, return_date, rental_period) --22
    values (default, 14, 4, '1 Apr 2021', '1 Apr 2021', '1 Apr 2021', '10 Apr 2021', 13);
insert into rental_doc(rental_docID, renterID, price_listID, create_date, pay_date, release_date, return_date, rental_period)
    values (default, 15, 5, '1 May 2021', '1 May 2021', '1 May 2021', '10 May 2021', 10);
insert into rental_doc(rental_docID, renterID, price_listID, create_date, pay_date, release_date, return_date, rental_period)
    values (default, 15, 6, '1 May 2021', '1 May 2021', '1 May 2021', '14 May 2021', 12);
insert into rental_doc(rental_docID, renterID, price_listID, create_date, release_date,  rental_period)
    values (default, 13, 7, '1 May 2021', '1 May 2021',  10);
insert into rental_doc(rental_docID, renterID, price_listID, create_date, release_date,  rental_period) --26
    values (default, 16, 7, '1 Apr 2021', '1 Apr 2021',  3);


insert into pay_doc(pay_docid, renterid) values (default, 12); --24
insert into pay_doc(pay_docid, renterid) values (default, 13);
insert into pay_doc(pay_docid, renterid) values (default, 14);
insert into pay_doc(pay_docid, renterid) values (default, 15); --27
insert into pay_doc(pay_docid, renterid) values (default, 12);
insert into pay_doc(pay_docid, renterid) values (default, 15);


insert into rent_payment(rental_docID, pay_docID, amount) values (18, 24, 60000);
insert into rent_payment(rental_docID, pay_docID, amount) values (19, 24, 50000);
insert into rent_payment(rental_docID, pay_docID, amount) values (20, 28, 23000);
insert into rent_payment(rental_docID, pay_docID, amount) values (21, 25, 30000);
insert into rent_payment(rental_docID, pay_docID, amount) values (22, 26, 13000);
insert into rent_payment(rental_docID, pay_docID, amount) values (23, 27, 40000);
insert into rent_payment(rental_docID, pay_docID, amount) values (24, 29, 100000);


insert into item(item_number, name, manufacturer_name, cost, quantity)
    values (1, 'чайник', 'ООО"Звездочка"', 300, 25);
insert into item(item_number, name, manufacturer_name, cost, quantity)
    values (2, 'тостер', 'ООО"Быт"', 400, 30);
insert into item(item_number, name, manufacturer_name, cost, quantity)
    values (3, 'пылесос', 'ООО"Звездочка"', 500, 31);
insert into item(item_number, name, manufacturer_name, cost, quantity)
    values (4, 'мультиварка', 'ООО"Быт"', 500, 16);
insert into item(item_number, name, manufacturer_name, cost, quantity)
    values (5, 'духовая печь', 'ООО"Кухня"', 1000, 7);
insert into item(item_number, name, manufacturer_name, cost, quantity)
    values (6, 'микроволновая печь', '"123"', 400, 10);
insert into item(item_number, name, manufacturer_name, cost, quantity)
    values (7, 'кухонные весы', 'ООО"Атлант"', 50, 130);
insert into item(item_number, name, manufacturer_name, cost, quantity)
    values (8, 'гриль', 'ООО"Звездочка"', 600, 42);


insert into item_list_line(price_listID, item_number) values (1, 1);
insert into item_list_line(price_listID, item_number) values (1, 2);
insert into item_list_line(price_listID, item_number) values (2, 3);
insert into item_list_line(price_listID, item_number) values (3, 4);
insert into item_list_line(price_listID, item_number) values (4, 5);
insert into item_list_line(price_listID, item_number) values (5, 6);
insert into item_list_line(price_listID, item_number) values (6, 7);
insert into item_list_line(price_listID, item_number) values (7, 8);


insert into rented_items(rental_docID, price_listID, item_number, quantity) --10
    values (18, 1, 1, 10);
insert into rented_items(rental_docID, price_listID, item_number, quantity) --10
    values (18, 1, 2, 10);
insert into rented_items(rental_docID, price_listID, item_number, quantity) --10
    values (19, 2, 3, 10);
insert into rented_items(rental_docID, price_listID, item_number, quantity) --5
    values (20, 2, 3, 10);
insert into rented_items(rental_docID, price_listID, item_number, quantity) --10
    values (21, 3, 4, 6);
insert into rented_items(rental_docID, price_listID, item_number, quantity) --13
    values (22, 4, 5, 1);
insert into rented_items(rental_docID, price_listID, item_number, quantity) --10
    values (23, 5, 6, 10);
insert into rented_items(rental_docID, price_listID, item_number, quantity) --12
    values (24, 6, 7, 20);
insert into rented_items(rental_docID, price_listID, item_number, quantity)
    values (25, 7, 8, 8);
insert into rented_items(rental_docID, price_listID, item_number, quantity)
    values (26, 7, 8, 2);

--*/
--join/where

-- 1. Получить информацию об ассортименте товаров, имеющихся в бюро. Отчет представить в виде:
-- Наименование name и артикул товара item_number; наименование фирмы-изготовителя manufacturer_name;
-- текущее количество товара на складе quantity; суммарное количество товара на руках у арендаторов sum_quantity;
-- количество товара, для которого срок аренды уже истек expired_quanyity.

with tab1 as ( -- количество товара, для которого срок аренды уже истек
    select item_number, sum(quantity) as expired_quanyity from rented_items
    join rental_doc on rented_items.rental_docID = rental_doc.rental_docID
    where (return_date is null) and (current_date > (release_date + rental_period * interval '1 day'))
    group by item_number
), tab2 as ( -- суммарное количество товара на руках у арендаторов
    select item_number, sum(quantity) as sum_quantity from rented_items
    join rental_doc on rented_items.rental_docID=rental_doc.rental_docID
    where (return_date is null)
    group by item_number
)
select name, item.item_number, manufacturer_name, quantity, coalesce(sum_quantity , 0) as sum_quantity,
       coalesce(expired_quanyity, 0) as expired_quanyity from item
left join tab1 on item.item_number=tab1.item_number
left join tab2 on item.item_number=tab2.item_number;


-- 2. Получить информацию о состоянии дел арендаторов. Отчет представить в виде:
-- Категория арендатора renter_category; ФИО арендатора (одной колонкой) для физического лица
-- или наименование фир-мы для юридического лица name; адрес address; телефон telephone_number;
-- количество оформленных документов об аренде count; общая стоимость всех аренд all_cost;
-- общая сумма выплат по платежным документам all_payments;
-- количество документов об аренде, для которых нарушены сроки аренды fine_count;
-- сумма штрафа за нарушение условий аренды fine; количество документов об аренде, по которым товар еще не возвращен expired_count.

with tab1 as ( -- количество оформленных документов об аренде;
               -- общая стоимость всех аренд
    select rental_doc.renterID, count(rental_doc.rental_docID) as count, sum(cost * rented_items.quantity) as all_cost
    from rental_doc
    join rented_items on rental_doc.rental_docID = rented_items.rental_docID
    join item on item.item_number=rented_items.item_number
    group by rental_doc.renterID
), tab2 as ( -- общая сумма выплат по платежным документам;
    select rental_doc.renterID, sum(amount) as all_payments from rental_doc
    join rent_payment on rental_doc.rental_docID = rent_payment.rental_docID
    group by rental_doc.renterID
), tab3 as ( -- количество документов об аренде, для которых нарушены сроки аренды;
             -- сумма штрафа за нарушение условий аренды
    select rental_doc.renterID, count(rental_doc.rental_docID) as fine_count,
           sum((current_date - rental_doc.release_date -
                               rental_period * integer'1') * cost * rented_items.quantity) as fine from rental_doc
    join rented_items on rental_doc.rental_docID = rented_items.rental_docID
    join item on item.item_number=rented_items.item_number
    where (return_date is null) and (current_date > (release_date + rental_period * interval '1 day'))
    group by rental_doc.renterID
), tab4 as ( -- количество документов об аренде, по которым товар еще не возвращен
    select rental_doc.renterID, count(rental_doc.rental_docID) as expired_count from rental_doc
    where return_date is null
    group by rental_doc.renterID
), tab5 as (
    select renter.renterID, renter_category, name, address, telephone_number from renter
    join legal_person lp on renter.renterID = lp.renterID
    union
    select renter.renterID, renter_category, name, address, telephone_number  from renter
    join private_person pp on renter.renterID = pp.renterID
    order by renterID
)
select renter.renterID, renter.renter_category, name, address, telephone_number, count, all_cost,
       coalesce(all_payments, 0) as all_payments, coalesce(fine_count, 0) as fine_count, coalesce(fine, 0) as fine,
       coalesce(expired_count, 0) as expired_count from renter
left join tab5 on tab5.renterID=renter.renterID
left join tab1 on tab1.renterID=renter.renterID
left join tab2 on tab2.renterID=renter.renterID
left join tab3 on tab3.renterID=renter.renterID
left join tab4 on tab4.renterID=renter.renterID;



-- 3. Для товаров, которые были арендованы на самый длительный суммарный срок, получить отчет в следующем виде:
-- Наименование name и артикул товара item_number; наименование фирмы-изготовителя manufacturer_name;
-- общая (суммарная) продолжительность аренды sum_duration; средняя продолжительность аренды (на одну аренду) avg_duration;
-- общее количество документов об аренде, содержащих данный товар doc_count;
-- количество разных клиентов, арендовавших данный товар renter_count; суммарный доход от аренды данного товара profit;
-- количество товара на складе quantity; количество товара на руках у арендаторов rent_quantity.

with tab1 as (
    select item_number, sum(rental_period) as sum from rental_doc
    join rented_items on rental_doc.rental_docID = rented_items.rental_docID
    group by item_number
), tab as (
    select tab1.item_number from rental_doc
    join rented_items on rental_doc.rental_docID = rented_items.rental_docID
    join tab1 on tab1.item_number=rented_items.item_number
    group by tab1.item_number
    having sum(rental_period) = (select max(sum) from tab1)
), tab2 as ( -- общая (суммарная) продолжительность аренды;
             -- средняя продолжительность аренды (на одну аренду);
             -- общее количество документов об аренде, содержащих данный товар;
             -- количество разных клиентов, арендовавших данный товар
    select tab.item_number, sum(rental_period) as sum_duration, avg(rental_period) as avg_duration, count(rental_doc.rental_docID) as doc_count,
           count(renterID) as renter_count from rental_doc
    join rented_items on rental_doc.rental_docID = rented_items.rental_docID
    join tab on tab.item_number=rented_items.item_number
    group by tab.item_number
), tab3 as ( -- суммарный доход от аренды данного товара
    select tab.item_number, sum(cost * rented_items.quantity * rental_period) as profit, sum(rented_items.quantity) as rent_quantity from rented_items
    join item on item.item_number=rented_items.item_number
    join rental_doc on rented_items.rental_docID = rental_doc.rental_docID
    join tab on tab.item_number=rented_items.item_number
    group by tab.item_number
)
select name, item.item_number, manufacturer_name, sum_duration, avg_duration, doc_count, renter_count, profit,
      quantity, rent_quantity from item
join tab2 on item.item_number=tab2.item_number
join tab3 on item.item_number=tab3.item_number;
--join tab4 on item.item_number=tab4.item_number;

with tab1 as (
    select item_number, sum(rental_period) as sum from rental_doc
    join rented_items on rental_doc.rental_docID = rented_items.rental_docID
    group by item_number
)
    select tab1.item_number from rental_doc
    join rented_items on rental_doc.rental_docID = rented_items.rental_docID
    join tab1 on tab1.item_number=rented_items.item_number
    group by tab1.item_number
    having sum(rental_period) = (select max(sum) from tab1);

select item_number, sum(rental_period) as sum from rental_doc
    join rented_items on rental_doc.rental_docID = rented_items.rental_docID
    group by item_number;
/*, tab4 as ( -- количество товара на руках у арендаторов
    select tab1.item_number,  from rented_items
    join rental_doc on rented_items.rental_docID = rental_doc.rental_docID
    join tab1 on tab1.item_number=rented_items.item_number
    where (return_date is null)
    group by tab1.item_number
)*/

-- 4. Для клиентов, оформивших максимальное количество договоров аренды, получить отчет в виде:
-- Категория арендатора renter_category; ФИО арендатора для физического лица или наименование фир-мы для юридического лица name;
-- адрес address; телефон telephone_number; количество оформленных документов об аренде max_count;
-- общая стоимость всех аренд all_cost; общая сумма выплат по платежным документам payout;
-- общее количество арендованного товара all_quantity;
-- суммарная продолжительность аренды в днях sum_duration.

with tab as (
    select renterID, count(rental_docID) as count from rental_doc
    group by renterID
), tab1 as (
    select renterID from tab
    where count = (select max(count) from tab)
), tab2 as ( -- количество оформленных документов об аренде
             -- суммарная продолжительность аренды в днях
    select tab1.renterID, count(rental_docID) as max_count, sum(rental_period) as sum_duration from rental_doc
    join tab1 on tab1.renterID=rental_doc.renterID
    group by tab1.renterID
), tab3 as ( -- общая стоимость всех аренд;
             -- общая сумма выплат по платежным документам
             -- общее количество арендованного товара
    select tab1.renterID, sum(cost * rented_items.quantity * rental_period) as all_cost, sum(amount) as payout,
           sum(rented_items.quantity) as all_quantity from rented_items
    join rental_doc on rented_items.rental_docID = rental_doc.rental_docID
    join item on item.item_number=rented_items.item_number
    join rent_payment on rental_doc.rental_docID = rent_payment.rental_docID
    join tab1 on tab1.renterID=rental_doc.renterID
    group by tab1.renterID
), tab5 as (
    select renter.renterID, renter_category, name, address, telephone_number from renter
    join legal_person lp on renter.renterID = lp.renterID
    union
    select renter.renterID, renter_category, name, address, telephone_number  from renter
    join private_person pp on renter.renterID = pp.renterID
    order by renterID
)
select renter.renterID, renter.renter_category, name, address, telephone_number,
       max_count, all_cost, payout, all_quantity, sum_duration from renter
--join tab1 on tab1.renterID=renter.renterID
join tab5 on tab5.renterID=renter.renterID
join tab2 on tab2.renterID=renter.renterID
join tab3 on tab3.renterID=renter.renterID;


with tab1 as (
    select renterID, count(rental_docID) as count from rental_doc
    group by renterID
),
tab4 as ( -- количество товара, находящегося в данный момент у арендатора
    select tab1.renterID, sum(rented_items.quantity) as rented_quantity from rented_items
    join rental_doc on rented_items.rental_docID = rental_doc.rental_docID
    join tab1 on tab1.renterID=rental_doc.renterID
    where return_date is null
    group by tab1.renterID
)
select tab1.renterID from rental_doc
    join tab1 on tab1.renterID=rental_doc.renterID
    where (select count from tab1) = (select max(count) from tab1)
    group by tab1.renterID, rental_docID;




-- 5. Для категорий прайс-листов, чаще всего используемых при оформлении аренды, получить отчет в виде:
-- Категория прайс-листа categoryID; среднее количество товаров, включенных в один прайс-лист данной категории avg_count;
-- количество разных товаров, включенных во все прайс-листы данной категории sum_count;
-- количество документов об аренде, оформленных по прайс-листам данной категории count;
-- общее количество арендаторов, обслуживаемых по прайс-листам данной категории renter_count;
-- количество арендаторов, оформивших документы об аренде count(renterID).

with tab1 as (
    select price_list_categoryID, count(rental_docID) as count from price_list_category
    join price_list on price_list_category.price_listID = price_list.price_listID
    join rental_doc on price_list.price_listID = rental_doc.price_listID
    group by price_list_categoryID
), tab2 as ( -- количество документов об аренде, оформленных по прайс-листам данной категории count
    select tab1.price_list_categoryID as categoryID, count from price_list_category
    join price_list on price_list_category.price_listID = price_list.price_listID
    join rental_doc on price_list.price_listID = rental_doc.price_listID
    join tab1 on tab1.price_list_categoryID=price_list_category.price_list_categoryID
    group by tab1.price_list_categoryID, count
    having count(rental_docID) = (select max(count) from tab1)
), tab3 as (
    select p.price_listID, count(item_number) as item_count from price_list
    join price_list_category p on price_list.price_listID = p.price_listID
    join tab2 on price_list_categoryID=categoryID
    join item_list_line ill on price_list.price_listID = ill.price_listID
    group by p.price_listID
), tab4 as( -- среднее количество товаров, включенных в один прайс-лист данной категории
            -- количество разных товаров, включенных во все прайс-листы данной категории
    select categoryID, avg(item_count) as avg_count, sum(item_count) as sum_count from tab3
    join price_list_category on tab3.price_listID=price_list_category.price_listID
    join tab2 on price_list_categoryID=categoryID
    group by price_list_categoryID, categoryID
), tab5 as ( -- общее количество арендаторов, обслуживаемых по прайс-листам данной категории;
    select tab2.categoryID, count(renter.renterID) as renter_count from renter
    join price_list_category plc on renter.renterID = plc.renterID
    join tab2 on tab2.categoryID=plc.price_list_categoryID
    group by tab2.categoryID
 )
select tab2.categoryID, avg_count, sum_count, count, renter_count, count(renter.renterID) from renter
join price_list_category on renter.renterID = price_list_category.renterID
join tab2 on price_list_categoryID=tab2.categoryID
join tab4 on tab4.categoryID=tab2.categoryID
join tab5 on tab5.categoryID=tab2.categoryID
group by tab2.categoryID, avg_count, sum_count, count, renter_count;




explain analyze
select distinct name from item
join rented_items ri on item.item_number = ri.item_number;
explain analyse
select distinct name from item
where item_number in (select item_number from rented_items);
